#!/bin/sh
#
# Startup script for program
#
# chkconfig: 35 55 25        
# description: Voxeo Prism Application Server 
# processname: AS
# pidfile: /var/run/as.pid

# Source function library.      This creates the operating environment for the process to be started
. /etc/init.d/functions

WaitForPidToExit() {
	# check for a maximum of 60 seconds
	local retry=60
	local pid=`cat $PIDFILE`
	local foundpid=
	
	foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
	while [ -n "$foundpid" -a "$retry" -gt 0 ]; do
		sleep 1
		echo -n "."
		retry=$(($retry -1))
		foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
	done
    
	# if Process still running, kill it
	if [ -n "$foundpid" ] ; then
		echo ""
		echo $pid " is still running.  Kill it."
		kill -9 `ps -ef | grep $pid | awk '!/grep/ {print $2}'`
	fi
}

PIDFILE=/var/run/voxeo-as.pid

case "$1" in
  start)
        echo -n "Starting  AS: "
	if [ -e $PIDFILE ]; then
		echo "  AS Already running.  Stop it first."
		exit 1
	fi 
    export HOME=/opt/voxeo/prism
    export LD_LIBRARY_PATH=/opt/voxeo/prism/bin:/opt/voxeo/prism/lib:$LD_LIBRARY_PATH$
	cd /opt/voxeo/prism/bin;	/opt/voxeo/prism/bin/prism service as PIDFILE=$PIDFILE 2>&1 >>/dev/null

        echo
        touch /var/lock/subsys/voxeo-as
        ;;
  stop)
        echo -n "Shutting down AS: "
        if [ -e $PIDFILE ]; then
            kill `cat $PIDFILE`
            WaitForPidToExit
            rm -f /var/lock/subsys/voxeo-as
            rm -f $PIDFILE
	    else
		    echo "  AS not running."
            rm -f /var/lock/subsys/voxeo-as
            exit 1
	    fi
        echo
        ;;
  status)
        status voxeo-as
        ;;
  restart)
        $0 stop
        $0 start
        ;;
  reload)
        echo -n "Reloading AS: "
        killproc voxeo-as -HUP
        echo
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|reload|status}"
        exit 1
esac

exit 0
